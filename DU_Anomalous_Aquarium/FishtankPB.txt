{"slots":{"0":{"name":"CreatureScreen","type":{"events":[],"methods":[]}},"1":{"name":"HUDScreen","type":{"events":[],"methods":[]}},"2":{"name":"SpeciesStorage","type":{"events":[],"methods":[]}},"3":{"name":"Emitter","type":{"events":[],"methods":[]}},"4":{"name":"Receiver","type":{"events":[],"methods":[]}},"5":{"name":"testDS","type":{"events":[],"methods":[]}},"6":{"name":"testDS2","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"if output == \"CLEAR\" then\n    CreatureScreen.setScriptInput(\"\")\nelseif string.sub(output, 1, 3) == \"BG:\" then\n    ChosenBackground = math.floor(string.sub(output, 4, 4))\n    CreatureSizes[1] = StrFind(output, \"SZ1:\")\n    CreatureSizes[2] = StrFind(output, \"SZ2:\")\n    CreatureSizes[3] = StrFind(output, \"SZ3:\")\n    CreatureSizes[4] = StrFind(output, \"SZ4:\")\n    CreatureSizes[5] = StrFind(output, \"SZ5:\")\n    CreatureSizes[6] = StrFind(output, \"SZ6:\")\n    CreatureSizes[7] = StrFind(output, \"SZ7:\")\n    CreatureSizes[8] = StrFind(output, \"SZ8:\")\nend","filter":{"args":[{"variable":"*"}],"signature":"onOutputChanged(output)","slotKey":"0"},"key":"0"},{"code":"\nif string.sub(output, 1, 3) == \"BG1\" then\n    CreatureScreen.setScriptInput(\"BG1\")\nelseif string.sub(output, 1, 3) == \"BG2\" then\n    CreatureScreen.setScriptInput(\"BG2\")\nelseif string.sub(output, 1, 3) == \"BG3\" then\n    CreatureScreen.setScriptInput(\"BG3\")\nelseif string.sub(output, 1, 3) == \"BG4\" then\n    CreatureScreen.setScriptInput(\"BG4\")\n    \nelseif string.sub(output, 1, 4) == \"FEED\" then --make public\n    CreatureScreen.setScriptInput(\"FEED\")\n    \nelseif string.sub(output, 1, 7) == \"BUYDLC:\" then\n    secureSend(output)\n    \nelseif string.sub(output, 1, 8) == \"STORENAV\" then\n    system.setWaypoint(\"::pos{0,2,39.6122,124.3714,19.0235}\", true)\n\n    \n    --setOutput(\"BUYDLC:\".. StrFind(selectedDLC, \"NAME:\")..\"~PRICE:\"..math.floor(StrFind(selectedDLC, \"PRICE:\")) ..\"~\")\n    \nelseif string.sub(output, 1, 10) == \"ENABLERAIN\" then\n    CreatureScreen.setScriptInput(output)\n    EnableRain = StrFind(output, \"ENABLERAIN:\")\n    \nelseif string.sub(output, 1 ,12) == \"ENABLESTORMS\" then\n    CreatureScreen.setScriptInput(output)\n    EnableStorms = StrFind(output, \"ENABLESTORMS:\")\n    \nelseif string.sub(output, 1, 15) == \"ENABLELIGHTORBS\" then\n    CreatureScreen.setScriptInput(output)\n    EnableLightOrbs = StrFind(output, \"ENABLELIGHTORBS:\")\n    \nelseif output == \"FindStore\" then\n    system.print(\"Looking for store...\")\n    unit.setTimer(\"StorePulse\", 0.35)\n    \n    \n    \nelseif output == \"DownloadItem\" then\n    system.print(\"Requesting download of current item...\")\n    secureSend(\"CreatureContainmentUnit:CoralReef~User:\"..\n        \"PLAYERID:\"..player.getId()..\"~QUERY:DOWNLOAD~\")\n    \nelseif output == \"NextDLC\" or getNextDLC == true then\n    system.print(\"Requesting next DLC from fishtank...\")\n    secureSend(\"CreatureContainmentUnit:CoralReef~User:\"..\n        \"PLAYERID:\"..player.getId()..\"~QUERY:NEXT~\")\n    getNextDLC = false\nend\n\nunit.setTimer(\"InputReset\", 0.05)\n\n\n\n--[[  THE GREAT AND MIGHTY  ]]--\n--[[    ALL - IMPORTANT     ]]--\n--[[     RENDER CYCLING     ]]--\n--[[ SAVE PROGRESS FUNCTION ]]--\n\n\nif string.sub(output, 1, 5) == \"SAVE:\" and LoadingIsComplete == 1 and isOwner == \"YES\" then\n    \n    --first, get current settings from screen output\n    CS = {}\n    CS[1] = StrFind(output, \"CS1:\")\n    CS[2] = StrFind(output, \"CS2:\")\n    CS[3] = StrFind(output, \"CS3:\")\n    CS[4] = StrFind(output, \"CS4:\")\n    CS[5] = StrFind(output, \"CS5:\")\n    \n    ES = {}\n    ES[1] = StrFind(output, \"ES1:\")\n    ES[2] = StrFind(output, \"ES2:\")\n    ES[3] = StrFind(output, \"ES3:\")\n    ES[4] = StrFind(output, \"ES4:\")\n    ES[5] = StrFind(output, \"ES5:\")\n    ES[6] = StrFind(output, \"ES6:\")\n    ES[7] = StrFind(output, \"ES7:\")\n    ES[8] = StrFind(output, \"ES8:\")\n    \n    BGI = StrFind(output, \"BGI:\")\n    rainTog = StrFind(output, \"RAIN:\")\n    stormTog = StrFind(output, \"STORM:\")\n    lightsTog = StrFind(output, \"DYLIGHT:\")\n    \n    setFishScreen()\n    setHudScreen()\n    \n    \nend --end of render cycle\n\n","filter":{"args":[{"variable":"*"}],"signature":"onOutputChanged(output)","slotKey":"1"},"key":"1"},{"code":"if string.sub(output, 1, 6) == \"TOTAL:\" then\n    TotalCreatures = math.floor(StrFind(output, \"TOTAL:\"))\n    --system.print(\"Found total: \"..TotalCreatures)\nelseif string.sub(output, 1, 5) == \"NAME:\" then\n    AvailableCreatures[#AvailableCreatures + 1] = output\n    --system.print(\"Found Species: \"..output)\nend\n\nSpeciesStorage.setScriptInput(\"\")","filter":{"args":[{"variable":"*"}],"signature":"onOutputChanged(output)","slotKey":"2"},"key":"2"},{"code":"--system.print(\"Fishtank got: \"..message)\nif message == \"StoreAwake\" then\n    secureSend(\"CreatureContainmentUnit:CoralReef~User:\"..\n        \"PLAYERID:\"..player.getId()..\"~QUERY:CHECK~Cid:\"..construct.getId()..\"~\")\n    unit.stopTimer(\"StorePulse\")\n\n\nelseif channel == secureChannel then\n    if string.sub(message, 1, 11) == \"StoreFound:\" then\n        --system.print(\"Found a store - \"..message)\n        HUDScreen.setScriptInput(message)\n        secureSend(\"GETNEXTDLC\")\n\n    elseif string.sub(message, 1, 8) == \"NextDLC:\" then\n        --system.print(\"Found a DLC item - \"..message)\n        \n        if StrFind(message, \"INDEX:\") == \"END\" then\n            HUDScreen.setScriptInput(\"PBON\")\n            unit.stopTimer(\"dlcDelay\")\n        else\n            HUDScreen.setScriptInput(message)\n            unit.setTimer(\"dlcDelay\", 0.15)\n\n        end\n    elseif string.sub(message, 1, 12) == \"DLCAPPROVED:\" then\n        HUDScreen.setScriptInput(message)\n        AvailableCreatures[#AvailableCreatures + 1] = string.sub(message, 13, string.len(message))\n        storageRenderCycle()\n    end\nend\n\n\n","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"onReceived(channel,message)","slotKey":"4"},"key":"3"},{"code":"if LoadStage == 0 then\n    --announcement, show loading bar, etc\n    --Also, get total number of available creatures from datascreen\n    SpeciesStorage.setScriptInput(\"GetTotal\")\nelseif LoadStage > 0 then\n    --get the corresponding creature entry from the datascreen\n    SpeciesStorage.setScriptInput(\"GetSpecies:\"..LoadStage)\nend\n\n\n\nif LoadStage > TotalCreatures and TotalCreatures > 0 then\n\n    --system.print(#AvailableCreatures..\" : \"..TotalCreatures)\n    if #AvailableCreatures == TotalCreatures then\n        unit.stopTimer(\"LoadData\")\n        LoadingIsComplete = 1\n        HUDScreen.setScriptInput(\"PBON\")\n    else\n        LoadStage = 0\n    end\n    \n    --system.print(\"Found these species:\")\n    local i = 0\n    while i < #AvailableCreatures do\n        i = i + 1\n        --system.print(StrFind(AvailableCreatures[i], \"NAME:\"))\n    end\nend\n\nLoadStage = LoadStage + 1\n\n\n\n\n","filter":{"args":[{"value":"LoadData"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"4"},{"code":"CreatureScreen.setScriptInput(\"\")\nunit.stopTimer(\"InputReset\")","filter":{"args":[{"value":"InputReset"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"5"},{"code":"Receiver.setChannelList({player.getId()})","filter":{"args":[{"value":"ReceiverTO"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"6"},{"code":"Emitter.send(\"CorruptedStorePingRFAQ\")\nReceiver.setChannelList({player.getId()})\nunit.setTimer(\"ReceiverTO\", 0.25)","filter":{"args":[{"value":"StorePulse"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"7"},{"code":"secureSend(\"GETNEXTDLC\")\nsystem.print(\"Getting Next DLC\")\nunit.stopTimer(\"dlcDelay\")","filter":{"args":[{"value":"dlcDelay"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"8"},{"code":"\nif string.sub(text, 1, 4) == \"Rain\" then\n    local rainString = \"RAIN\"\n    if string.sub(text, 5, 9) == \"storm\" then\n        rainString = rainString..\"STORM\"\n    elseif string.sub(text, 5, 9) == \"clear\" then\n        rainString = rainString..\"CLEAR\"\n    end\n    CreatureScreen.setScriptInput(rainString)\n    system.print(\"Sending: \"..rainString)\n    unit.setTimer(\"InputReset\", 0.05)\nend\n","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"9"},{"code":"system.print(\"Powering on Aquarium. User: \"..player.getName())\nsystem.print(\"ACU Version 2 contains the following features:\")\nsystem.print(\"Click the square menu button for configuration options.\")\nsystem.print(\"Click the 'BG' buttons to change the active background.\")\nsystem.print(\"Click the '!' button to drop fish food into the aquarium.\")\nisOwner = \"NOPE\"\n--get owner: \nunitOwner = construct.getOwner()\nunitOwner = unitOwner.id\nuserOrgs = player.getOrgIds()\n\nif player.getName() == \"Corrupted\" then --creator level access\n    isOwner = \"YES\"\nend\n\ni = 0\nwhile i < #userOrgs do\n    i = i + 1\n    if userOrgs[i] == unitOwner then\n        isOwner = \"YES\"\n    end\nend\n\nif unitOwner == player.getId() then\n    isOwner = \"YES\"\nend\n\nHUDScreen.activate()\nHUDScreen.setScriptInput(\"PBLOAD\")\nCreatureScreen.activate()\nSpeciesStorage.activate()\nReceiver.setChannelList({player.getId()})\n--Door.open()\n\nLoadingIsComplete = 0\nLoadStage = 0\nTotalCreatures = 0\nunit.setTimer(\"LoadData\", 0.15)\nsecureChannel = \"13&9023!11&38\"..player.getId()..\"Cid:\"..construct.getId()..\"~\"\n\n\n\nChosenCreatures = {} --available datastrings to pick from\nEquippedCreatures = {} --datastrings in actual slots, 1-10\nCreatureSizes = {}\nAvailableCreatures = {}\nAvailableCreatures[0] = \"This is necessary for some reason\"\n\nfunction StrFind(String, Key)\n    found, start = string.find(String, Key)\n    if found == nil or start == nil then\n        return \"0000000000\"\n    end\n    subString = string.sub(String, start + 1, string.len(String))\n    fin = string.find(subString, '~')\n    if fin == nil or start == nil then\n        return \"0000000000\"\n    end\n    return string.sub(subString, 1, fin - 1)\nend\n\nfunction secureSend(outMessage)\n    unit.setTimer(\"ReceiverTO\", 0.05)\n    Receiver.setChannelList({secureChannel})\n    Emitter.send(\"CorruptedStoreSignalRFAQ\", outMessage)\n    --system.print(\"Sent: \"..outMessage)\nend\n\n\n\n\nfunction storageRenderCycle()\n    newCreatureData = \"\"..\n    \n\"if AvailableCreatures == nil then AvailableCreatures = {} end\\n\"\n    \n    i = 0\n    while i < #AvailableCreatures do\n        i = i + 1\n        newCreatureData = newCreatureData..\"\\nAvailableCreatures[\"..i..\"] = \\\"\"..AvailableCreatures[i]..\"\\\"\\n\"\n    end  \n\n    newCreatureData = newCreatureData..\n[[\nlocal creatureListLayer = createLayer()\nlocal rx, ry = getResolution()\nlocal font1 = loadFont(\"BankGothic\", 25)\nlocal font2 = loadFont(\"TurretRoad\", 50)\nsetLayerOrigin(creatureListLayer, rx /2, ry / 2)\nsetLayerRotation(creatureListLayer, (3.14 / 2)*3)\ninput = getInput()\noutput = \"\"\n\nfunction StrFind(String, Key)\n    found, start = string.find(String, Key)\n    subString = string.sub(String, start + 1, string.len(String))\n    fin = string.find(subString, '~')\n    return string.sub(subString, 1, fin - 1)\nend\n\naddText(creatureListLayer, font2, \"Available Species :\", 285, -140)\n\n\n\nlocal i = 1\nwhile i < #AvailableCreatures do\n    i = i + 1\n    addText(creatureListLayer, font1, \"\".. i - 1 ..\": \"..StrFind(AvailableCreatures[i], \"NAME:\"), 220, -140  + (i * 30))\n    \nend\n\nif input == \"GetTotal\" then\n    output = \"TOTAL:\"..#AvailableCreatures..\"~\"\nelseif string.sub(input, 1, 11) == \"GetSpecies:\" then\n    output = AvailableCreatures[math.floor(string.sub(input, 12, string.len(input)))] or \"\"\nelseif input == \"\" then\n    output = \"\"\nend\nsetOutput(output)\n\n]]\n    \n    SpeciesStorage.setRenderScript(newCreatureData)\nend\n\n\n    -- Fish screen:\nfunction setFishScreen()\n    fishScreenRenderScript = \"\"..\n    \n[[\n    \n    \nlocal BGLayer = createLayer()\nCreatureLayer = createLayer()\nTextLayer = createLayer()\nFont1 = loadFont(\"TurretRoad\", 20)\n\nlocal MaxRage = 500\n    \n\n--used by loadFish function to identify substrings\nfunction StrFind(String, Key)\n    found, start = string.find(String, Key)\n    if found == nil or start == nil then\n        return \"0000000000\"\n    end\n    subString = string.sub(String, start + 1, string.len(String))\n    fin = string.find(subString, '~')\n    if fin == nil or start == nil then\n        return \"0000000000\"\n    end\n    return string.sub(subString, 1, fin - 1)\nend\n\n--Splits fish data string into usable fields for each Creature\nfunction loadCreature(CreatureDataS, newCreature)\n    newCreature.Img = StrFind(CreatureDataS, \"IMGR:\")\n    newCreature.SizeX = math.floor(StrFind(CreatureDataS, \"SIZEX:\"))\n    newCreature.SizeY = math.floor(StrFind(CreatureDataS, \"SIZEY:\"))\n    newCreature.MaxY = math.floor(StrFind(CreatureDataS, \"MAXY:\"))\n    newCreature.MinY = math.floor(StrFind(CreatureDataS, \"MINY:\"))\n    newCreature.Speed = math.floor(StrFind(CreatureDataS, \"SPD:\"))\n    newCreature.Metabolism = math.floor(StrFind(CreatureDataS, \"METAB:\"))\n    newCreature.Special = math.floor(StrFind(CreatureDataS, \"SPECIAL:\"))\n    newCreature.Ability = StrFind(CreatureDataS, \"ABILITY:\")\n    newCreature.Growth = 1.15\n    newCreature.Power = math.floor(StrFind(CreatureDataS, \"PWR:\"))\n    newCreature.Transparency = tonumber(StrFind(CreatureDataS, \"CTHRU:\"))\n    newCreature.Fade = 0\n    newCreature.Hunger = 0\n    newCreature.Aggression = math.floor(StrFind(CreatureDataS, \"AGGRO:\"))\n    newCreature.Rage = 0\n    newCreature.Target = \"NONE\"\n    newCreature.XMov = math.random(-13, -4)\n    newCreature.YMov = math.random(-8, 8)\n    newCreature.XPos = math.random(0, 1000)\n    newCreature.YPos = newCreature.MinY + 20\n    newCreature.MovCD = 0\n    newCreature.HuntCD = 0\n    newCreature.Fade = 1\n    newCreature.Light = 0 --interacts with invisible 'light' objects\nend\n\nfunction rotate(RSRC, RTGT)\n    local x = math.abs(RTGT.XPos) - math.abs(RSRC.XPos)\n    local y = math.abs(RTGT.YPos) - math.abs(RSRC.YPos)\n    local rotation = math.atan(x,y)\n    return -rotation\n        end\n\nfunction newRaindrop()\n    local rainChance = math.random(0,3)\n    \n    if rainChance > 0 then\n        Raindrops[#Raindrops + 1] = {}\n        Raindrops[#Raindrops].XPos = math.random(0, 1200)\n        Raindrops[#Raindrops].YPos = 1\n        Raindrops[#Raindrops].YMov = 8\n        Raindrops[#Raindrops].Life = 1\n    end\nend\n\nfunction newLightOrb()\n        LightOrbs[#LightOrbs + 1] = {}\n        LightOrbs[#LightOrbs].XPos = math.random(0, 1024)\n        LightOrbs[#LightOrbs].YPos = 100 + (50 * #LightOrbs)\n        LightOrbs[#LightOrbs].XMov = math.random(7, 12)\nend\n\n--  UpdateFish - Updates movements and draws the fish\nfunction UpdateCreature(Critter)\n  \n    targetFood = nil\n    local facing = \"RIGHT\"\n    \n    --run loop to determine which food is closest (up to 5 pieces at a time)\n    if #Food > 0 and Critter.HuntCD <= 0 then\n        local k = 0\n        nearFoodX = 2000\n        while k < #Food do\n            k = k + 1\n            if ((math.abs(Food[k].XPos) - math.abs(Critter.XPos)) < nearFoodX) and (Food[k].YPos > Critter.MinY) and (Food[k].YPos < Critter.MaxY) then\n                nearFoodX = Food[k].XPos\n                targetFood = Food[k]\n                targetFood.Index = k\n            end\n        end\n    end\n    \n    --Hunting Behavior Block\n    \n    if targetFood ~= nil and Critter.HuntCD <= 0 then\n        \n        if targetFood.XPos > Critter.XPos + 5 then\n            Critter.XPos = Critter.XPos + (Critter.Speed / 2)\n            setNextRotation(CreatureLayer, rotate(Critter, targetFood) + 1.77)\n        else\n            Critter.XPos = Critter.XPos - (Critter.Speed / 2)\n            facing = \"LEFT\"\n            setNextRotation(CreatureLayer, rotate(Critter, targetFood) - 1.37)\n        end\n        \n        if targetFood.YPos > Critter.YPos and (targetFood.YPos - Critter.YPos) > Critter.Speed then\n            Critter.YPos = Critter.YPos + (Critter.Speed / 2)\n        elseif targetFood.YPos < Critter.YPos and (Critter.YPos - targetFood.YPos) > Critter.Speed then\n            Critter.YPos = Critter.YPos - (Critter.Speed / 2)\n        end\n        \n        if math.sqrt( (math.abs(Critter.XPos - targetFood.XPos)^2) + (math.abs(Critter.YPos  - targetFood.YPos)^2) ) < (Critter.SizeX / 2) then\n            -- kill food, increase fish size, instate cooldown\n            table.move(Food, targetFood.Index + 1, #Food, targetFood.Index)\n            Food[#Food] = nil\n            Critter.HuntCD = 900 - Critter.Metabolism\n        end\n    end\n    \n    --Enraged Movement Block\n    local k = 0\n    local closestDist = 2000\n    local rangeBonus = 0\n    while k < #Creatures and Critter.Rage < MaxRage do\n        k = k + 1\n        if (Critter.XPos ~= Creatures[k].XPos) then\n            newDist = math.sqrt( (math.abs(Critter.XPos - Creatures[k].XPos)^2) + (math.abs(Critter.YPos  - Creatures[k].YPos)^2) ) - Critter.Aggression\n        \n            if newDist < closestDist then\n                closestDist = newDist\n                Critter.Target = Creatures[k]\n            end\n        \n            if Weather == \"RAIN\" then rangeBonus = Critter.SizeX / 3 end\n            if Weather == \"STORM\" then rangeBonus = Critter.SizeX / 2 end\n            \n            if newDist < (Critter.SizeX * 1.25 + rangeBonus) then\n                Critter.Rage = Critter.Rage + Critter.Aggression\n                if Weather == \"RAIN\" then Critter.Rage = Critter.Rage + (Critter.Aggression / 2) end\n                if Weather == \"STORM\" then Critter.Rage = Critter.Rage + (Critter.Aggression) end\n                if Critter.Hunger > (1000 - Critter.Metabolism) then Critter.Rage = Critter.Rage + (Critter.Aggression) end\n            end\n        end\n        \n    end\n    \n    if targetFood == nil and Critter.Rage >= MaxRage then\n        if Critter.Target.XPos > Critter.XPos then\n            Critter.XPos = Critter.XPos + (Critter.Speed)\n            setNextRotation(CreatureLayer, rotate(Critter, Critter.Target) + 1.77)\n        else\n            Critter.XPos = Critter.XPos - (Critter.Speed)\n            facing = \"LEFT\"\n            setNextRotation(CreatureLayer, rotate(Critter, Critter.Target) - 1.37)\n        end\n        \n        if Critter.Target.YPos > Critter.YPos and (Critter.Target.YPos - Critter.YPos) > Critter.Speed then\n            Critter.YPos = Critter.YPos + (Critter.Speed / 2)\n        elseif Critter.Target.YPos < Critter.YPos and (Critter.YPos - Critter.Target.YPos) > Critter.Speed then\n            Critter.YPos = Critter.YPos - (Critter.Speed / 2)\n        end\n        \n        --boundary check\n        if Critter.YPos < Critter.MinY then\n            Critter.Rage = 0\n            Critter.Target = \"NONE\"\n        --hit check\n        elseif math.sqrt( (math.abs(Critter.XPos - Critter.Target.XPos)^2) + (math.abs(Critter.YPos  - Critter.Target.YPos)^2) ) < ((Critter.SizeX / 2)  + Critter.Power) then\n            Critter.Rage = 0\n            Critter.Target.Rage = Critter.Target.Rage / 2\n            Critter.Target.Target = \"NONE\"\n            if Critter.XPos < Critter.Target.XPos then\n                Critter.Target.XMov = (Critter.Target.Speed * 2)\n            else\n                Critter.Target.XMov = (Critter.Target.Speed * 2) * -1\n            end\n            Critter.Target.YMov = (Critter.Target.Speed + 3) * -1\n            Critter.Target.MovCD = math.random(math.floor(Critter.Speed / 2), math.floor(Critter.Speed * 4))\n        end\n    end\n    \n    \n    --Standard Movement Block\n    if targetFood == nil and Critter.Rage < MaxRage then\n\n        if Critter.YPos > Critter.MaxY then\n            Critter.YPos = Critter.MaxY - 1\n            Critter.YMov = math.random(-1, 0)\n        elseif Critter.YPos < Critter.MinY then\n            Critter.YPos = Critter.MinY + 1\n            Critter.YMov = math.random(0, 1)\n        end\n        \n        if Critter.XPos > 1025 then\n            Critter.XPos = 1024\n            Critter.XMov = math.random(-1, 0)\n        elseif Critter.XPos < 0 then\n            Critter.XPos = 1\n            Critter.XMov = math.random(0, 1)\n        end\n\n        math.randomseed(Critter.YPos + Critter.XPos + getTime())\n\n        if Critter.MovCD <= 0 then\n            Critter.XMov = math.random(-Critter.Speed, Critter.Speed)\n            Critter.YMov = math.random(math.floor(-Critter.Speed / 4), math.floor(Critter.Speed / 2))\n            Critter.MovCD = math.random(math.floor(Critter.Speed * 2), math.floor(Critter.Speed * 4))\n            if Critter.YPos < (Critter.MaxY / 2) then\n                Critter.YMov = Critter.YMov - (Critter.Speed / 4)\n            end\n        end\n\n        Critter.MovCD = Critter.MovCD - 1\n\n        Critter.XPos = Critter.XPos + Critter.XMov\n        Critter.YPos = Critter.YPos + Critter.YMov\n        if Weather == \"RAIN\" then Critter.YPos = Critter.YPos + math.abs(Critter.YMov / 4) end\n        if Weather == \"STORM\" then Critter.YPos = Critter.YPos + math.abs(Critter.YMov / 2) end\n\n        Critter.XMov = Critter.XMov * 0.93\n        Critter.YMov = Critter.YMov * 0.93\n    \n        if Critter.MaxY - Critter.YPos > 4 then --slight natural drop\n            Critter.YPos = Critter.YPos + 0.5\n        end\n        \n        if Critter.XMov <= 0 then\n            facing = \"LEFT\"\n        end\n        \n    end -- end standard movement block\n    \n    if Critter.Light > 0 then Critter.Light = Critter.Light - 0.02 end\n\n    setNextFillColor(CreatureLayer, (0.85 - (Darkness / 1.2) - (Critter.YPos / 3000) + (Flash * 0.06)) - Critter.Light, (0.85 - (Darkness / 1.2) - (Critter.YPos / 3000) + (Flash * 0.12)) - Critter.Light, (0.85 - (Darkness / 1.2) - (Critter.YPos / 3000) + (Flash * 0.18)) - Critter.Light, Critter.Transparency)\n    Critter.model = loadImage(Critter.Img)\n    if facing == \"LEFT\" then\n        addImageSub(CreatureLayer, Critter.model, Critter.XPos - (Critter.SizeX / 2), Critter.YPos - ((Critter.SizeY / 2) * Critter.Growth), Critter.SizeX * Critter.Growth, Critter.SizeY * Critter.Growth, 0, 0, 920, 550)\n    else\n        addImageSub(CreatureLayer, Critter.model, Critter.XPos - (Critter.SizeX / 2), Critter.YPos - ((Critter.SizeY / 2) * Critter.Growth), Critter.SizeX * Critter.Growth, Critter.SizeY * Critter.Growth, 920, 0, 920, 550)\n    end \n    \n    \n    targetFood = nil\n    Critter.Hunger = Critter.Hunger + 1\n    Critter.HuntCD = Critter.HuntCD - 1\n    if Critter.Growth > 1.05 and Critter.Hunger >= (1000 - Critter.Metabolism) then\n        Critter.Growth = Critter.Growth - 0.005\n    elseif Critter.Growth < 1.6 and Critter.HuntCD > 0 then\n        Critter.Growth = Critter.Growth + 0.015\n    end\n    \n    --Special Features:\n    if Critter.Ability == \"WEATHER\" then\n        WeatherCD = WeatherCD - Critter.Special\n    elseif Critter.Ability == \"LIGHTNING\" then\n        LightningCD = LightningCD - Critter.Special\n    elseif Critter.Ability == \"RAIN\" then\n        MaxRainDrops = MaxRainDrops + 10\n    elseif Critter.Ability == \"ANGER\" then\n        i = 0\n        while i < #Creatures do\n            i = i + 1\n            Creatures[i].Rage = Creatures[i].Rage + (Critter.Aggression / 2)\n        end\n    elseif Critter.Ability == \"PEACE\" then\n        i = 0\n        while i < #Creatures do\n            i = i + 1\n            Creatures[i].Rage = Creatures[i].Rage - (Critter.Aggression / 2)\n        end    \n    end\n    --STORM:\n    \nend --END OF UPDATEFISH\n\n\n                                                                 -- EXECUTION --\n\n\nlocal rx, ry = getResolution()\ninput = getInput()\noutput = \"NULL\"\nmath.randomseed(getTime()* 258 - 102)\n\n]]..\n   \n\"if INIT == nil then\"..\n    \"\\nBGI = \"..BGI..\n    \"\\nEnableRain = \"..rainTog..\n    \"\\nEnableStorms = \"..stormTog..\n    \"\\nEnableLightOrbs = \"..lightsTog..\n    \n    [[\n    Food = {}\n    Raindrops = {}\n    MaxRainDrops = 80\n    LightOrbs = {}\n    FoodCD = 5\n    CreatureData = {}\n    Creatures = {}\n    Darkness = 0\n    Flash = 0\n    Weather = \"CLEAR\"\n    WeatherCD = math.random(1000, 3000)\n    LightningCD = math.random(15, 75)\n    ]]\n    \n    c = 0\n    while c < 8 do\n        c = c + 1\n        --ES.i = ES[i]\n        creatureSlot = AvailableCreatures[math.floor(CS[math.floor(ES[c])])]\n        fishScreenRenderScript = fishScreenRenderScript..\"\\nCreatureData[\"..c..\"] = \\\"\"..creatureSlot..\"\\\"\\nCreatures[\"..c..\"] = {}\\nloadCreature(CreatureData[\"..c..\"], Creatures[\"..c..\"])\\n\"\n    end\n\n\n    fishScreenRenderScript = fishScreenRenderScript..\n    \n    [[\n        \n    --Creatures[1] = {}\n\n    --loadCreature(CreatureData[1], Creatures[1])\n\n    newLightOrb()\n    newLightOrb()\n    newLightOrb()\n    newLightOrb()\n    newLightOrb()\n    newLightOrb()\n    newLightOrb()\n    newLightOrb()\n    newLightOrb()\n    newLightOrb()\n    \n    INIT = \"DONE\"\nend\n\n-- Create Food\nif (input == \"FEED\") and (FoodCD <= 0) then\n    Food[#Food + 1] = {}\n    Food[#Food].XPos = math.random(200, 800)\n    Food[#Food].YPos = 1\n    Food[#Food].Life = 1000\n    \n    \n    if #Food > 8 then\n        FoodCD = 150\n    else\n        FoodCD = 15\n    end\nend\nFoodCD = FoodCD - 1\n\n\n\n-- Update Food \nlocal i = 0\nwhile i < #Food do\n    \n    i = i + 1\n    if Food[i].YPos < 535 then\n        Food[i].YPos = Food[i].YPos + 1\n    end\n    Food[i].Life = Food[i].Life - 1\n    setNextFillColor(CreatureLayer, 1, 0.2, 0.1, 1)\n    addCircle(CreatureLayer, Food[i].XPos, Food[i].YPos, 4)\n    \n    if Food[i].Life <= 0 then\n        table.move(Food, i + 1, #Food, i)\n        Food[#Food] = nil\n    end\nend\n\n\n\n-- Weather effects \nif string.sub(input, 1, 4) == \"RAIN\" then\n    if string.sub(input, 5, 9) == \"STORM\" then\n        Weather = \"STORM\"\n        WeatherCD = -1\n    elseif string.sub(input, 5, 9) == \"CLEAR\" then\n        Weather = \"CLEAR\"\n        WeatherCD = math.random(1000, 3000)\n    else\n        Weather = \"RAIN\"\n    end\n    WeatherCD = -1\nend\n\n\nif WeatherCD == 0 and (EnableRain == 1 or EnableStorms == 1) then\n    local weatherSeverity = math.random(0,3)\n    \n    if EnableStorms == 0 and EnableRain == 1 then\n        weatherSeverity = 0\n    elseif EnableStorms == 1 and EnableRain == 0 then\n        weatherSeverity = 3\n    end\n    \n    if weatherSeverity > 2 then\n        Weather = \"STORM\"\n    elseif weatherSeverity <= 2 then\n        Weather = \"RAIN\"\n    end\n    setOutput(\"CLEAR\")\nelseif WeatherCD == 0 then\n    WeatherCD = math.random(1000, 3000)\nend\n\n\nif Weather == \"STORM\" then\n    LightningCD = LightningCD - 1\n    if LightningCD <= 0 then\n        LightningCD = math.random(15, 75)\n        Flash = math.random(2,5)\n    end\n\n    if Darkness < 0.35 then\n        Darkness = Darkness + 0.005\n    end\n    \n    if #Raindrops < MaxRainDrops then\n        newRaindrop()\n        newRaindrop()\n        newRaindrop()\n        newRaindrop()\n    end\n\nelseif Weather == \"RAIN\" then\n    if Darkness < 0.25 then\n        Darkness = Darkness + 0.005\n    end\n    \n    if #Raindrops < 40 then\n        newRaindrop()\n        newRaindrop()\n    end\nend\n\nif WeatherCD <= -600 then\n    WeatherCD = math.random(1000, 3000)\n    Weather = \"CLEAR\"\nend\n\nRainModel = loadImage(\"assets.prod.novaquark.com/131682/e8cf30bf-a493-47f8-bd71-e3295544ed74.png\")\n\n\n-- Update Raindrops \nlocal i = 0\nwhile i < #Raindrops do\n    \n    i = i + 1\n    Raindrops[i].YPos = Raindrops[i].YPos + Raindrops[i].YMov\n    Raindrops[i].YMov = Raindrops[i].YMov * 0.95\n    Raindrops[i].Life = Raindrops[i].Life - 0.025\n    setNextFillColor(CreatureLayer, 0, 0.1, 0.3, Raindrops[i].Life)\n    raindropRand = math.random(0,2) * 50\n    addImageSub(TextLayer, RainModel, Raindrops[i].XPos, Raindrops[i].YPos, 4, 17 * (Raindrops[i].Life), raindropRand, 0, 50, 150  )\n    if Raindrops[i].Life <= 0 then\n        table.move(Raindrops, i + 1, #Raindrops, i)\n        Raindrops[#Raindrops] = nil\n    end\nend\n\n--Weather cleanup\nWeatherCD = WeatherCD - 1\nif Darkness > 0 then Darkness = Darkness - 0.0025 end\nif Flash > 0 then Flash = Flash - 1 end\nMaxRainDrops = 80\n\n\n-- Update Light Orbs \nif EnableLightOrbs == 1 then\n    local i = 1\n    local k = 0\n    while i < #LightOrbs do\n    \n        k = k + 1\n    \n        if k == 1 then\n            LightOrbs[i].XPos = LightOrbs[i].XPos + LightOrbs[i].XMov\n    \n            if LightOrbs[i].XPos < 0 then\n                LightOrbs[i].XPos = 1\n                LightOrbs[i].XMov = LightOrbs[i].XMov * -1\n            end\n    \n            if LightOrbs[i].XPos > 1024 then\n                LightOrbs[i].XPos = 1023\n                LightOrbs[i].XMov = LightOrbs[i].XMov * -1\n            end\n            --setNextFillColor(TextLayer, 0.7, 0.7, 1, 1)\n            --addCircle(TextLayer, LightOrbs[i].XPos, LightOrbs[i].YPos, 2)\n        end\n    \n        local LightDist = math.sqrt( (math.abs(LightOrbs[i].XPos - Creatures[k].XPos)^2) + (math.abs(LightOrbs[i].YPos - Creatures[k].YPos)^2) )\n    \n        if LightDist < 90 then\n            Creatures[k].Light = (0.2 / (LightDist / 90))\n            if Creatures[k].Light > 0.2 then Creatures[k].Light = 0.2 end\n        end\n        \n        if k >= #Creatures then\n            i = i + 1\n            k = 0\n        end\n    end\nend\n    \n    \n\n-- Update each existing fish \nlocal i = 0\nwhile i < #Creatures do\n    i = i + 1\n    if Creatures[i].Name ~= \"Nothing\" then --skip empty slots\n        UpdateCreature(Creatures[i])\n    end\nend\n\n-- Add background and debug indicators \nif input == \"BG1\" then\n    BGI = 1\nelseif input == \"BG2\" then\n    BGI = 2\nelseif input == \"BG3\" then\n    BGI = 3\nelseif input == \"BG4\" then\n    BGI = 4\n    \nelseif string.sub(input, 1, 10) == \"ENABLERAIN\" then\n    EnableRain = math.floor(StrFind(input, \"ENABLERAIN:\"))\n    \nelseif string.sub(input, 1, 12) == \"ENABLESTORMS\" then\n    EnableStorms = math.floor(StrFind(input, \"ENABLESTORMS:\"))\n    \nelseif string.sub(input, 1, 15) == \"ENABLELIGHTORBS\" then\n    EnableLightOrbs = math.floor(StrFind(input, \"ENABLELIGHTORBS:\"))\nend\n\nif BGI == 1 then \n    BGC = loadImage(\"assets.prod.novaquark.com/38363/de6f4e3f-577d-4e09-9edd-d20ef566d212.png\")\nelseif BGI == 2 then\n    BGC = loadImage(\"assets.prod.novaquark.com/38363/c5844259-3748-46b7-9d4f-bb7ab4511adc.jpg\")\nelseif BGI == 3 then\n    BGC = loadImage(\"assets.prod.novaquark.com/38363/fcedec09-dd92-483c-9004-3ba92b974bdc.jpg\")\nelseif BGI == 4 then\n    BGC = loadImage(\"assets.prod.novaquark.com/38363/416e9988-3460-417d-a4c8-e352abe7e142.jpg\")\nend\nsetNextFillColor(BGLayer, 0.65 - Darkness + (Flash * 0.06), 0.65 - Darkness + (Flash * 0.10), 0.65 - Darkness + (Flash * 0.14), 1)\naddImage(BGLayer, BGC, 0, 0, rx, ry)\n\n--test statements\n--addText(TextLayer, Font1, \"Render Cost: \"..getRenderCost(), 100, 100)\n--addText(TextLayer, Font1, \"Render Budget: \"..getRenderCostMax(), 100, 125)\n\nsetOutput(output)\nrequestAnimationFrame(2)\n    \n    ]]\n    \n    CreatureScreen.setRenderScript(fishScreenRenderScript)\nend\n\n\nfunction setHudScreen()\n        --time for HUD Screen!\n    \n    hudScreenRenderScript = \"\"..\n    \n    [[\n    \n    -- * Function Definitions * --\n\n--Find variable in string\nfunction StrFind(String, Key)\n    if String == nil then\n        return \"0000000000\"\n    else\n        \n        found, start = string.find(String, Key)\n        if found == nil or start == nil then\n            return \"0000000000\"\n        end\n        subString = string.sub(String, start + 1, string.len(String))\n        fin = string.find(subString, '~')\n        if fin == nil or start == nil then\n        return \"0000000000\"\n        end\n        return string.sub(subString, 1, fin - 1)\n    end\nend\n\n--Create Circular Button\n\nfunction circleButton(X, Y, R, ButtonFunc, Desc)\n    local centerDist = math.sqrt( (math.abs(X - Mouse.XPos)^2) + (math.abs(Y - Mouse.YPos)^2) )\n    --glow effect\n    if currentFrame < 26 then\n        setNextShadow(textLayer, 2 + (currentFrame / 4), ButtonRed, ButtonGreen, ButtonBlue, 1)\n    else\n        setNextShadow(textLayer, 2 + (13 - (currentFrame / 4)), ButtonRed, ButtonGreen, ButtonBlue, 1)\n    end\n    --white outline\n    setNextStrokeWidth(textLayer, 0.5)\n    setNextStrokeColor(textLayer, 0.75, 0.75, 0.75, 1)\n    if centerDist < R and Mouse.down == true then\n        setNextFillColor(textLayer, 0.55, 0.95, 0.55, 0.80)\n        if MouseDownCD == 0 then\n            ButtonFunc()\n            MouseDownCD = 1\n        end\n    elseif centerDist < R then --Halfway visible when hovered\n    setNextFillColor(textLayer, 0.55, 0.55, 0.55, 0.30)\n    else  --nearly transparent if not hovered\n    setNextFillColor(textLayer, 0.15, 0.15, 0.15, 0.10)\n    end\n    addCircle(textLayer, X, Y, R)\n    addText(textLayer, font2, Desc, X - (R / 2) - (R / 8), Y + 5)\nend\n\n--Create Menu Button\n\nfunction squareButton(X, Y, XS, YS, R, ButtonFunc)\n    --glow effect\n    if currentFrame < 26 then\n        setNextShadow(textLayer, 2 + (currentFrame / 4), ButtonRed, ButtonGreen, ButtonBlue, 1)\n    else\n        setNextShadow(textLayer, 2 + (13 - (currentFrame / 4)), ButtonRed, ButtonGreen, ButtonBlue, 1)\n    end\n    --white outline\n    setNextStrokeWidth(textLayer, 0.5)\n    setNextStrokeColor(textLayer, 0.75, 0.75, 0.75, 1)\n    if Mouse.XPos > (X + 1) and Mouse.XPos < (X + (XS - 1)) and Mouse.YPos > (Y + 1) and Mouse.YPos < (Y + (YS - 1)) and Mouse.down == true then\n        setNextFillColor(textLayer, 0.55, 0.95, 0.55, 0.80)\n        if MouseDownCD == 0 then\n            ButtonFunc()\n            MouseDownCD = 1\n        end\n    elseif Mouse.XPos > (X + 1) and Mouse.XPos < (X + (XS - 1)) and Mouse.YPos > (Y + 1) and Mouse.YPos < (Y + (YS - 1)) then --Halfway visible when hovered\n        setNextFillColor(textLayer, 0.55, 0.55, 0.55, 0.30)\n    else  --nearly transparent if not hovered\n        setNextFillColor(textLayer, 0.15, 0.15, 0.15, 0.10)\n    end\n    addBoxRounded(textLayer, X, Y, XS, YS, R)\nend\n    \n    \n\n--used to reset Equipped creatures when choosing different species as not to mix old choices into the new array\n    function updateEquipped() ]]..\n    \n        \"\\nEquippedCreatures[1] = ChosenCreatures[Slot[1]]\"..\n        \"\\nEquippedCreatures[2] = ChosenCreatures[Slot[2]]\"..\n        \"\\nEquippedCreatures[3] = ChosenCreatures[Slot[3]]\"..\n        \"\\nEquippedCreatures[4] = ChosenCreatures[Slot[4]]\"..\n        \"\\nEquippedCreatures[5] = ChosenCreatures[Slot[5]]\"..\n        \"\\nEquippedCreatures[6] = ChosenCreatures[Slot[6]]\"..\n        \"\\nEquippedCreatures[7] = ChosenCreatures[Slot[7]]\"..\n        \"\\nEquippedCreatures[8] = ChosenCreatures[Slot[8]]\"..\n    \n    [[\n    end\n\n\n-- * Setup * --\nrx, ry = getResolution()\nMouse = {}\nMouse.down = getCursorDown() --true and false\nMouse.XPos, Mouse.YPos = getCursor()\ninput = getInput()\n\nif getCursorReleased() == true then\n    MouseDownCD = 0\nend\n\nfont1 = loadFont(\"BankGothic\", 40)\nfont2 = loadFont(\"TurretRoad\", 14)\nfont3 = loadFont(\"TurretRoad\", 18)\nwaterLayer = createLayer()\ntextLayer = createLayer()\nBGLayer = createLayer()\nactualWater = loadImage(\"assets.prod.novaquark.com/38363/45185f78-9d31-4472-8876-40a5544e5cd5.png\")\n-- * Global Variable Initialization * --\n    \n    \nif INIT == nil then\n    currentFrame = 0\n    AvailableCreatures = {}\n    ChosenCreatures = {}\n    EquippedCreatures = {}\n    CreatureGrowth = {}\n    \n    UserChips = 0\n    DLCProducts = {}\n    DLCImages = {}\n    selectedDLC = nil\n    DLCPage = 0\n    DLCCanBuy = 0\n    DLCConfirm = 0\n    \n    MODE = \"NORMAL\"\n    STATE = \"LOADING\"\n    ButtonGreen = 0.75\n    ButtonRed = 0.1\n    ButtonBlue = 0.4\n    MouseDownCD = 0\n    \n    ]]..\n    \n    \"\\nEnableLightOrbs = \"..lightsTog..\n    \"\\nEnableRain = \"..rainTog..\n    \"\\nEnableStorms = \"..stormTog..\n    \n    \"\\nBGI = \"..BGI..\n    \n    [[\n    \n    BGL = {}\n    BGL[1] = \"assets.prod.novaquark.com/131682/ed15241d-2dfd-4546-9d09-860ad0804b5e.png\"\n    BGL[2] = \"assets.prod.novaquark.com/131682/d21390d4-0100-4149-afee-5c7ce7dc0b07.jpg\"\n    BGL[3] = \"assets.prod.novaquark.com/131682/572b6e63-3a50-4015-90a0-9297421bf7a0.jpg\"\n    BGL[4] = \"assets.prod.novaquark.com/131682/10672cd2-5734-4d51-b984-1fef571d77ed.jpg\"\n    \n    BGS = {}\n    \n    ]]..\n    \n    \"\\nSpecies = {}\"..\n    \"\\nSpecies[1] = \"..CS[1]..\n    \"\\nSpecies[2] = \"..CS[2]..\n    \"\\nSpecies[3] = \"..CS[3]..\n    \"\\nSpecies[4] = \"..CS[4]..\n    \"\\nSpecies[5] = \"..CS[5]..\n    \n    \"\\nSlot = {}\"..\n    \"\\nSlot[1] = \"..ES[1]..\n    \"\\nSlot[2] = \"..ES[2]..\n    \"\\nSlot[3] = \"..ES[3]..\n    \"\\nSlot[4] = \"..ES[4]..\n    \"\\nSlot[5] = \"..ES[5]..\n    \"\\nSlot[6] = \"..ES[6]..\n    \"\\nSlot[7] = \"..ES[7]..\n    \"\\nSlot[8] = \"..ES[8]\n\n    \n    \n    h = 0\n    while h < #AvailableCreatures do\n        h = h + 1\n        hudScreenRenderScript = hudScreenRenderScript..\"\\nAvailableCreatures[\"..h..\"] = \\\"\"..AvailableCreatures[math.floor(h)]..\"\\\"\\n\"\n    end\n    \n    hudScreenRenderScript = hudScreenRenderScript..\n    \n    \n\n    \"\\nChosenCreatures[1] = AvailableCreatures[\"..math.floor(CS[1])..\"] or AvailableCreatures[1]\\n\"..\n    \n    \"\\nChosenCreatures[2] = AvailableCreatures[\"..math.floor(CS[2])..\"] or AvailableCreatures[2]\\n\"..\n    \n    \"\\nChosenCreatures[3] = AvailableCreatures[\"..math.floor(CS[3])..\"] or AvailableCreatures[3]\\n\"..\n    \n    \"\\nChosenCreatures[4] = AvailableCreatures[\"..math.floor(CS[4])..\"] or AvailableCreatures[4]\\n\"..\n    \n    \"\\nChosenCreatures[5] = AvailableCreatures[\"..math.floor(CS[5])..\"] or AvailableCreatures[1]\\n\"..\n    \n    \n    \n    \"\\nEquippedCreatures[1] = ChosenCreatures[\"..math.floor(ES[1])..\"] or AvailableCreatures[1]\\n\"..\n    \n    \"\\nEquippedCreatures[2] = ChosenCreatures[\"..math.floor(ES[2])..\"] or AvailableCreatures[2]\\n\"..\n    \n    \"\\nEquippedCreatures[3] = ChosenCreatures[\"..math.floor(ES[3])..\"] or AvailableCreatures[3]\\n\"..\n    \n    \"\\nEquippedCreatures[4] = ChosenCreatures[\"..math.floor(ES[4])..\"] or AvailableCreatures[4]\\n\"..\n    \n    \"\\nEquippedCreatures[5] = ChosenCreatures[\"..math.floor(ES[5])..\"] or AvailableCreatures[1]\\n\"..\n    \n    \"\\nEquippedCreatures[6] = ChosenCreatures[\"..math.floor(ES[6])..\"] or AvailableCreatures[2]\\n\"..\n    \n    \"\\nEquippedCreatures[7] = ChosenCreatures[\"..math.floor(ES[7])..\"] or AvailableCreatures[3]\\n\"..\n    \n    \"\\nEquippedCreatures[8] = ChosenCreatures[\"..math.floor(ES[8])..\"] or AvailableCreatures[4]\\n\"..\n\n    [[\n    \n    INIT = \"COMPLETE\"\nend\n\n\n-- * Water Effect * --\n\ncurrentFrame = currentFrame + 1\n\nif currentFrame >= 53 then\n    currentFrame = 0 \nend\n\nsetNextFillColor(waterLayer, 1, 1, 1, 0.14)\naddImageSub(waterLayer, actualWater, 0, 0, rx, ry, 0, currentFrame * 167, 275, ry)\n\n\n-- * Mode detection * --\nif input == \"PBOFF\" then\n    STATUS = \"SLEEP\"\n    MODE = \"NORMAL\"\n    \nelseif input == \"PBON\" then\n    STATUS = \"ONLINE\"\nelseif input == \"PBLOAD\" then\n    STATUS = \"LOADING\"\nend\n\nif STATUS == \"ONLINE\" then\n    setNextFillColor(textLayer, 0.25, 2, 0, 2)\n    addText(textLayer, font2, \"SYSTEM ONLINE\", 700, 580)\n    ButtonRed = 0.1\n    ButtonGreen = 0.75\n    ButtonBlue = 0.4\nelseif STATUS == \"SLEEP\" then\n    setNextFillColor(textLayer, 1, 0.1, 2, 2)\n    addText(textLayer, font2, \"SYSTEM IN SLEEP MODE\", 670, 580)\n    ButtonGreen = 0.1\n    ButtonRed = 0.65\n    ButtonBlue = 0.95\nelse\n    setNextFillColor(textLayer, 1, 1, 0, 2)\n    addText(textLayer, font2, \"SYSTEM LOADING...\", 700, 580)\n    ButtonRed = 0.75\n    ButtonGreen = 0.75\n    ButtonBlue = 0.4\nend\n\n\n\n--Menu Buttons\n--config\nOutputFunc = function() if STATUS == \"ONLINE\" then if MODE == \"CONFIGURE\" then MODE = \"NORMAL\" else MODE = \"CONFIGURE\" end end MouseDownCD = 1 end\nsquareButton(407, 560, 30, 30, 5, OutputFunc)\naddLine(textLayer, 412, 567, 432, 567)\naddLine(textLayer, 412, 575, 432, 575)\naddLine(textLayer, 412, 583, 432, 583)\n--DLC\nOutputFunc = function() if STATUS == \"ONLINE\" then if MODE == \"DOWNLOAD\" then MODE = \"NORMAL\" UserChips = 0\n    DLCProducts = {}\n    DLCImages = {}\n    selectedDLC = nil\n    DLCPage = 0\n    DLCCanBuy = 0\n    DLCConfirm = 0 \n    connection = nil\n    else MODE = \"DOWNLOAD\" end end MouseDownCD = 1 end\nsquareButton(590, 560, 30, 30, 5, OutputFunc)\naddBox(textLayer, 602, 565, 6, 14)\naddTriangle(textLayer, 594, 576, 605, 585, 616, 576)\n\n\n--Feed the critters! \n    OutputFunc = function() if STATUS == \"ONLINE\" then setOutput(\"FEED\") end end\n    circleButton(512, 575, 20, OutputFunc, \"\")\n    addBezier(textLayer, 524, 560, 490, 575, 524, 590)\n    addCircle(textLayer, 522, 568, 3)\n    addLine(textLayer, 509, 578, 525, 578)\n    addCircle(textLayer, 502, 565, 1)\n    addCircle(textLayer, 498, 582, 1)\n\n-- * Normal Mode - Clear view with DLC, feeding, and menu buttons * --\nif MODE == \"NORMAL\" then\n--some normal mode stuff could possibly go here.\n\n-- * Configuration mode: allows selection of different fish species as well as different fish in each particular slot * --\nelseif MODE == \"CONFIGURE\" then\n    setNextFillColor(textLayer, 0.25, 0.45, 0.65, 0.80)\n    addBoxRounded(textLayer, 110, 110, rx - 220, ry - 220, 10)\n    -- Creature Type Change --\n    --header\n    \n    \n    \n    \n    --draw species selection buttons\n    addText(textLayer, font3, \"Choose Aquarium Species:\", 150, 145)\n    \n    i = 0\n    while i < 5 do\n        i = i + 1\n        addText(textLayer, font2, StrFind(ChosenCreatures[i], \"NAME:\"), 200, 149 + (i * 40)) ]]..\n        \"\\nOutputFunc = function() Species[i] = Species[i] - 1 if Species[i] < 1 then Species[i] = #AvailableCreatures end  ChosenCreatures[i] = AvailableCreatures[Species[i]] updateEquipped() end\\n\"..\n    \n    [[circleButton(165, 145 + (i * 40), 13, OutputFunc, \" < \")]]..\n    \n    \"\\nOutputFunc = function() Species[i] = Species[i] + 1 if Species[i] > #AvailableCreatures then Species[i] = 1 end  ChosenCreatures[i] = AvailableCreatures[Species[i]] updateEquipped() end\\n\"..\n    \n    [[circleButton(350, 145 + (i * 40), 13, OutputFunc, \" > \")\n    end\n\n    --draw slot selection buttons\n    addText(textLayer, font3, \"Aquarium Slots:\", 500, 145)\n    i = 0\n    while i < 8 do\n        i = i + 1\n        addText(textLayer, font2, StrFind(EquippedCreatures[i], \"NAME:\"), 510, 140 + (i * 40))]]..\n        \"\\nOutputFunc = function() Slot[i] = Slot[i] - 1 if Slot[i] < 1 then Slot[i] = #ChosenCreatures end EquippedCreatures[i] = ChosenCreatures[Slot[i]] end\\n\"..\n    \n        [[circleButton(475, 135 + (i * 40), 13, OutputFunc, \" < \")]]..\n    \n        \"\\nOutputFunc = function() Slot[i] = Slot[i] + 1 if Slot[i] > #AvailableCreatures then Slot[i] = 1 end EquippedCreatures[i] = ChosenCreatures[Slot[i]] end\\n\"..\n    \n         [[circleButton(660, 135 + (i * 40), 13, OutputFunc, \" > \")\n    end\n    \n    \n    -- Backgrounds: --\n    addText(textLayer, font3, \"Background Options\", 185, 405)\n    \n    i = 0\n    while i < 4 do\n        i = i + 1\n        OutputFunc = function() BGI = i setOutput(\"BG\"..i) end\n        squareButton(55 + (i * 75), 420, 65, 65, 4, OutputFunc, \"   \"..i)\n        BGS[i] = loadImage(BGL[i])\n        setNextFillColor(BGLayer, 1, 1, 1, 1)\n        addImage(BGLayer, BGS[i], 57 + (i * 75), 422, 61, 61)\n    end\n\n    setNextFillColor(BGLayer, 0, 0, 0, 0)\n    setNextStrokeWidth(BGLayer, 2)\n    setNextStrokeColor(BGLayer, 0.1, 2.85, 0.4, 2)\n    addBoxRounded(BGLayer, 61 + (75 * BGI), 426, 53, 53, 2)\n    \n    -- Other Options --\n    addText(textLayer, font3, \" Allow Rain\", 730, 150)\n    OutputFunc = function() if EnableRain == 1 then EnableRain = 0 else EnableRain = 1 end setOutput(\"ENABLERAIN:\"..EnableRain..\"~\") end \n    circleButton(785, 180, 14, OutputFunc, \" ~ \")\n    setNextFillColor(textLayer, 0, 0, 0, 0)\n    setNextStrokeWidth(textLayer, 2)\n    if EnableRain == 1 then\n        setNextStrokeColor(textLayer, 0.1, 1, 0.4, 2)\n    else\n        setNextStrokeColor(textLayer, 0.85, 0.1, 1, 2)\n    end\n    addCircle(textLayer, 785, 180, 8)\n    \n    addText(textLayer, font3, \"Allow Storms\", 730, 220)\n    OutputFunc = function() if EnableStorms == 1 then EnableStorms = 0 else EnableStorms = 1 end setOutput(\"ENABLESTORMS:\"..EnableStorms..\"~\") end \n    circleButton(785, 250, 14, OutputFunc, \" ~ \")\n    setNextFillColor(textLayer, 0, 0, 0, 0)\n    setNextStrokeWidth(textLayer, 2)\n    if EnableStorms == 1 then\n        setNextStrokeColor(textLayer, 0.1, 1, 0.4, 2)\n    else\n        setNextStrokeColor(textLayer, 0.85, 0.1, 1, 2)\n    end\n    addCircle(textLayer, 785, 250, 8)\n    \n    addText(textLayer, font3, \"Dynamic Lights\", 730, 290)\n    OutputFunc = function() if EnableLightOrbs == 1 then EnableLightOrbs = 0 else EnableLightOrbs = 1 end setOutput(\"ENABLELIGHTORBS:\"..EnableLightOrbs..\"~\") end \n    circleButton(785, 320, 14, OutputFunc, \" ~ \")\n    setNextFillColor(textLayer, 0, 0, 0, 0)\n    setNextStrokeWidth(textLayer, 2)\n    if EnableLightOrbs == 1 then\n        setNextStrokeColor(textLayer, 0.1, 1, 0.4, 2)\n    else\n        setNextStrokeColor(textLayer, 0.85, 0.1, 1, 2)\n    end\n    addCircle(textLayer, 785, 320, 8)\n    \n    -- Trigger Renderscript Cycle (SAVE PROGRESS): --\n    addText(textLayer, font3, \"Apply Changes\", 730, 380)\n    addText(textLayer, font2, \"and\", 780, 395)\n    addText(textLayer, font3, \"Save Progress\", 730, 415)\n    OutputFunc = function() setOutput(\"SAVE:\"..\"CS1:\"..Species[1]..\"~CS2:\"..Species[2]..\"~CS3:\"..Species[3]..\"~CS4:\"..Species[4]..\"~CS5:\"..Species[5]..\"~ES1:\"..Slot[1]..\"~ES2:\"..Slot[2]..\"~ES3:\"..Slot[3]..\"~ES4:\"..Slot[4]..\"~ES5:\"..Slot[5]..\"~ES6:\"..Slot[6]..\"~ES7:\"..Slot[7]..\"~ES8:\"..Slot[8]..\"~RAIN:\"..EnableRain..\"~STORM:\"..EnableStorms..\"~DYLIGHT:\"..EnableLightOrbs..\"~BGI:\"..BGI..\"~\") end\n    circleButton(785, 450, 20, OutputFunc, \"| S |\")\n    \nelseif MODE == \"DOWNLOAD\" then\n    --do download mode stuff\n    setNextFillColor(textLayer, 0.25, 0.45, 0.65, 0.80)\n    addBoxRounded(textLayer, 110, 110, rx - 220, ry - 220, 10)\n    \n    \n    addText(textLayer, font3, \"Set store as\", 145, 145)\n    addText(textLayer, font3, \" destination\", 145, 165)\n    OutputFunc = function() setOutput(\"STORENAV\") end -- FIXME! NEEDS FUNCTIONALITY IN PB! --CONSIDER SOME KIND OF UPDATE FOR NAV POINT JUST IN CASE\n    circleButton(195, 200, 20, OutputFunc, \"| D |\")\n    \n    \n    addText(textLayer, font3, \"  Load\", 155, 270)\n    addText(textLayer, font3, \" Store\", 155, 290)\n    addText(textLayer, font3, \"Contents\", 155, 310)\n    OutputFunc = function() setOutput(\"FindStore\") end \n    circleButton(190, 340, 20, OutputFunc, \"| C |\")\n    \n    if string.sub(input, 1, 11) == \"StoreFound:\" then\n        UserChips = StrFind(input, \"CHIPS:\") or 0\n        connection = string.sub(12, string.len(input))\n        STATE = \"LOADING\"\n    elseif string.sub(input, 1, 8) == \"NextDLC:\" then\n        DLCProducts[math.floor(StrFind(input, \"INDEX:\"))] = string.sub(input, 15, string.len(input))\n        DLCConfirm = 0\n    end\n    \n    \n    if connection ~= nil then\n        setNextFillColor(textLayer, 0.25, 2, 0, 2)\n        addText(textLayer, font2, \"CONNECTED TO STORE\", 200, 580)\n        addText(textLayer, font2, connection, 200, 555)\n    end\n    \n    --show available DLC\n    i = 1 + (DLCPage * 10)\n    k = 0\n    if math.floor(#DLCProducts / 10) == DLCPage then\n        DLCListCond = (#DLCProducts % 10)\n    else\n        DLCListCond = 10\n    end\n    \n    \n    while i <= (DLCListCond + (DLCPage * 10)) do\n        k = k + 1 \n        \n        --if the item is already purchased, make button transparent :\n        if StrFind(DLCProducts[i], \"NAME:\") == StrFind(AvailableCreatures[k], \"NAME:\") then\n            OutputFunc = function() selectedDLC = DLCProducts[i] DLCCanBuy = 0 DLCConfirm = 0 end\n            squareButton(95 + ((i - (DLCPage * 10)) * 70), 420, 60, 60, 4, OutputFunc, \"   \"..i)\n            DLCImages[i] = loadImage(StrFind(DLCProducts[i], \"IMGR:\"))\n            setNextFillColor(BGLayer, 1, 1, 1, 0.4)\n            addImageSub(BGLayer, DLCImages[i], 100 + ((i - (DLCPage * 10)) * 70), 437, 48, 24, 0, 0, 920, 550)\n            \n            k = 0\n            i = i + 1\n        end\n        \n        \n        if k >= #AvailableCreatures then -- if the item is not purchased yet, display clear image:\n            OutputFunc = function() selectedDLC = DLCProducts[i] DLCCanBuy = 1 DLCConfirm = 0 end\n            squareButton(95 + ((i - (DLCPage * 10)) * 70), 420, 60, 60, 4, OutputFunc, \"   \"..i)\n            DLCImages[i] = loadImage(StrFind(DLCProducts[i], \"IMGR:\"))\n            setNextFillColor(BGLayer, 1, 1, 1, 1)\n            addImageSub(BGLayer, DLCImages[i], 100 + ((i - (DLCPage * 10)) * 70), 437, 48, 24, 0, 0, 920, 550)\n\n            i = i + 1\n            k = 0\n        end\n        \n    end\n    \n    --scroll through available purchases with:\n    OutputFunc = function() DLCPage = DLCPage - 1 if DLCPage < 0 then DLCPage = math.floor(#DLCProducts / 10) end end \n    circleButton(140, 450, 13, OutputFunc, \" < \")\n    OutputFunc = function() DLCPage = DLCPage + 1 if DLCPage > math.floor(#DLCProducts / 10) then DLCPage = 0 end end \n    circleButton(880, 450, 13, OutputFunc, \" > \")\n    --addText(textLayer, font3, DLCPage, 645, 310)\n    \n    --if no DLC was previously selected, set selected to 1. \n    if selectedDLC == nil and #DLCProducts > 0 then\n        selectedDLC = DLCProducts[1]\n        DLCCanBuy = 0\n    end\n    \n    --Display details on current DLC item\n    if selectedDLC ~= nil then\n        \n        --detail container\n        setNextFillColor(BGLayer, 0, 0, 0, 0)\n        setNextStrokeColor(BGLayer, 0.75, 0.75, 0.75, 1)\n        setNextStrokeWidth(BGLayer, 0.5)\n        addBoxRounded(BGLayer, 275, 130, 620, 200, 4)\n        addText(textLayer, font3, \"Name: \"..StrFind(selectedDLC, \"NAME:\"), 280, 150)\n        --break up 'DESC:' property into readable lines, work backward from the nearest 'space' char at the char limit for each line\n        displayString = StrFind(selectedDLC, \"DESC:\")\n        t = 1\n        p = 0\n        while string.len(displayString) > 33 do\n            \n            p = 33\n            while p > 0 do\n                \n                if string.sub(displayString, p, p) == \" \" then\n                    lineEnd = p\n                    addText(textLayer, font2, string.sub(displayString, 1, lineEnd), 280, 150 + (t * 17))\n                    displayString = string.sub(displayString, lineEnd + 1, string.len(displayString))\n                    break\n                end\n                p = p - 1\n            end\n            t = t + 1\n        end\n        addText(textLayer, font2, string.sub(displayString, 1, string.len(displayString)), 280, 150 + (t * 17))\n        \n        --stats container\n        setNextFillColor(BGLayer, 0, 0, 0, 0)\n        setNextStrokeColor(BGLayer, 0.75, 0.75, 0.75, 1)\n        setNextStrokeWidth(BGLayer, 0.5)\n        addBoxRounded(BGLayer, 500, 135, 190, 190, 4)\n        addText(textLayer, font3, \"Length: \"..StrFind(selectedDLC, \"SIZEX:\"), 505, 155)\n        addText(textLayer, font3, \"Height: \"..StrFind(selectedDLC, \"SIZEY:\"), 505, 175)\n        addText(textLayer, font3, \"Minimum Depth: \"..StrFind(selectedDLC, \"MINY:\"), 505, 195)\n        addText(textLayer, font3, \"Maximum Depth: \"..StrFind(selectedDLC, \"MAXY:\"), 505, 215)\n        addText(textLayer, font3, \"Speed: \"..StrFind(selectedDLC, \"SPD:\"), 505, 235)\n        addText(textLayer, font3, \"Power: \"..StrFind(selectedDLC, \"PWR:\"), 505, 255)\n        addText(textLayer, font3, \"Aggression: \"..StrFind(selectedDLC, \"AGGRO:\"), 505, 275)\n        addText(textLayer, font3, \"Metabolism: \"..StrFind(selectedDLC, \"METAB:\"), 505, 295)\n        addText(textLayer, font3, \"? ? ?: \"..StrFind(selectedDLC, \"SPECIAL:\"), 505, 315)\n        \n        --fish image container\n        setNextFillColor(BGLayer, 0, 0, 0, 0)\n        setNextStrokeColor(BGLayer, 0.75, 0.75, 0.75, 1)\n        setNextStrokeWidth(BGLayer, 0.5)\n        addBoxRounded(BGLayer, 700, 135, 190, 190, 4)\n        \n        DLCImages.Current = loadImage(StrFind(selectedDLC, \"IMGR:\"))\n        setNextFillColor(BGLayer, 1, 1, 1, 1)\n        addImageSub(BGLayer, DLCImages.Current, 710, 180, 180, 90, 0, 0, 920, 550)\n        \n        --transaction container\n        setNextFillColor(BGLayer, 0, 0, 0, 0)\n        setNextStrokeColor(BGLayer, 0.75, 0.75, 0.75, 1)\n        setNextStrokeWidth(BGLayer, 0.5)\n        addBoxRounded(BGLayer, 500, 340, 395, 70, 4)\n        if math.floor(UserChips) < 9999999999 then\n            addText(textLayer, font3, \"Available Chips: \"..UserChips, 510, 400)\n        elseif math.floor(UserChips) > 9999999999 then\n            addText(textLayer, font3, \"Available Chips: 1 Billion+\", 510, 400)\n        end\n        if DLCConfirm == 3 then\n            addText(textLayer, font3, \"Transaction Successful!\", 510, 360)\n        end\n        \n    end\n    \n    \n    if DLCCanBuy == 1 and selectedDLC ~= nil then\n        addText(textLayer, font3, \"Value: \"..StrFind(selectedDLC, \"PRICE:\")..\" Chips\", 510, 380)\n        if math.floor(UserChips) < math.floor(StrFind(selectedDLC, \"PRICE:\")) then --update with price FIXME\n            addText(textLayer, font3, \"Cannot afford: Not enough Chips.\", 510, 360)\n        elseif DLCConfirm == 0 then\n            addText(textLayer, font3, \"Purchase this item now?\", 510, 360)\n            OutputFunc = function() DLCConfirm = 1 end \n            circleButton(775, 380, 20, OutputFunc, \"| P |\")\n        elseif DLCConfirm == 1 then\n            addText(textLayer, font3, \"Confirm Purchase: \"..StrFind(selectedDLC, \"NAME:\")..\"?\", 510, 360)\n            OutputFunc = function() setOutput(\"BUYDLC:\"..\"NAME:\".. StrFind(selectedDLC, \"NAME:\")..\"~PRICE:\"..math.floor(StrFind(selectedDLC, \"PRICE:\")) ..\"~\") DLCConfirm = 2 STATE = \"LOADING\" end \n            circleButton(855, 380, 20, OutputFunc, \"| C |\")\n        elseif DLCConfirm == 2 then\n            addText(textLayer, font3, \"Communicating with store...\", 510, 360)\n        end\n        elseif DLCCanBuy == 0 and selectedDLC ~= nil and DLCConfirm == 0 then\n        addText(textLayer, font3, \"You already own this item.\", 510, 360)\n\n    end\n    \n    if string.sub(input, 1, 12) == \"DLCAPPROVED:\" then\n        if DLCConfirm == 2 then\n            UserChips = math.floor(UserChips) - math.floor(StrFind(selectedDLC, \"PRICE:\"))\n            DLCConfirm = 3\n            AvailableCreatures[#AvailableCreatures + 1] = selectedDLC\n            selectedDLC = nil\n            setOutput(\"FindStore\") --update DLC page by re-contacting store and comparing owned vs unowned\n        end\n    end\n    \nend --end of modes\n\nif input == \"CLEAR\" then\n    output = \"\"\nend\n\nrequestAnimationFrame(4)\n    \n    ]]\n    \n    HUDScreen.setRenderScript(hudScreenRenderScript)\n    \nend","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"10"},{"code":"HUDScreen.setScriptInput(\"PBOFF\")","filter":{"args":[],"signature":"onStop()","slotKey":"-5"},"key":"11"}],"methods":[],"events":[]}